import empresa.*
import usuarios.*
import destinos.*

// el resultado da pero es una lista de listas 
test "los destinos mas importantes de barrileteCosmico el mas importante es garlicSea"
{
	assert.equals([garlicSea], barrileteCosmico.destinosMasImportantes())
}


test "aplicarle 25 de descuento a lastToninas con resultado 1125"
{
	lastToninas.aplicarDescuento(25)
	assert.equals(1125,lastToninas.precio())
}

test "aplicarle 25 de descuento a lastToninas y tiene el certificado de decuento en los imprescindibles"
{
	lastToninas.aplicarDescuento(25)
	assert.that(lastToninas.equipajeImprescindible().contains("certificado de descuento"))
}

test "silver sea no es un destino peligroso"
{
	assert.notThat(silverSea.esPeligroso())
}

test "aplicar descuento a todos comparar valores "
{
/*  es una mala practica utilizar muchos assert en 1 solo test pero no se me ocurrio otra forma de hacerlo
 coincidir lista con valores harcodeados con los del ejercicio
	barrileteCosmico.aplicarDescuento(15)
	assert.equals(2125,garlicSea.precio())
	assert.equals(1147.5,silverSea.precio())
	assert.equals(1275,lastToninas.precio())
	assert.equals(1275,goodAirs.precio())
	
	barrileteCosmico.destinos().all({destino => destino.tieneDescuento()})
*/	
	barrileteCosmico.aplicarDescuento(15)
	assert.equals([2125,1147.5,1275,1275],barrileteCosmico.preciosDeLosDestinos()) 
}

test "al aplicarDescuento a todos, todos tienen el certificado de descuento"
{
	barrileteCosmico.aplicarDescuento(15)
	assert.that(barrileteCosmico.destinos().all({destino => destino.tieneDescuento()}))
}

// el resultado da pero es una lista de listas 
test "los destinos mas peligrosos hasta el momento"
{
	assert.equals([lastToninas],barrileteCosmico.destinosPeligrosos())
}