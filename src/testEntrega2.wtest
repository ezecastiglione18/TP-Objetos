import localidades.*
import viajes.*
import usuarios.*
import mediosDeTransporte.*

describe "test de la entrega 2" 
{
	var phari = new User("phari", goodAirs, [viaje1, viaje2], 1500, [])
	
	var viaje1 = new Viaje(goodAirs, silverSea, avion)
	var viaje2 = new Viaje(goodAirs, garlicSea, micro)
	var viaje3 = new Viaje(goodAirs, lastToninas, tren)
	var viaje4 = new Viaje(goodAirs, tiger, tren)
	
	var garlicSea = new Localidad("Mar de Ajo", ["Cania de pescar", "Piloto"], 2500, 400)
	var silverSea = new Localidad("Mar del Plata", ["Protector solar", "Equipo buceo"], 1350, 175)
	var lastToninas = new Localidad("Las Toninas", ["Vacuna Gripal", "Vacuna B", "Necronomicon"], 3500, 250)
	var goodAirs = new Localidad("Buenos Aires", ["Cerveza", "Protector solar"], 1500, 100)
	var tiger = new Localidad("Tigre", ["Ropa deportiva","Gorra", "Repelente"], 1000, 45)
	
	var tren = new MedioDeTransporte(100, 200)
	var micro = new MedioDeTransporte(80, 175)
	var avion = new MedioDeTransporte(250, 500)
	
	var barrileteCosmico = new EmpresaDeViajes(#{garlicSea, silverSea, lastToninas, goodAirs}, #{tren, micro, avion})
	
	
	test "la distancia entre Mar de Ajo y Las Toninas es de 150 km" {
	
		assert.equals(150, garlicSea.distanciaA(lastToninas))
	}
	
	test "se tardan x horas desde Tigre hasta Mar del Plata en micro"
	{
		assert.equals(1.625, micro.cuantoTardoDesdeHasta(tiger, silverSea))
	}
	
	test "hacer que Pablo Hari organice un viaje hasta Tigre con Barrilete Cosmico"
	{
		phari.hacerUnViajeA(tiger,barrileteCosmico)
		
		assert.that(phari.viajes().contains(goodAirs, tiger, barrileteCosmico.transportes().anyOne()))
	}
	
	test "que pueda phari pagar un viaje hasta Mar de Ajo con Barrilete Cosmico"
	{
		assert.that(phari.puedeCostear(garlicSea, barrileteCosmico))
	}
	
	test "el precio del viaje 2 es de 55000 pesos"
	{
		assert.equals(2500 + (300*175), viaje2.precio())
	}
	
	test "calcular los km de phari"
	{
		assert.equals(375, phari.kilometros())
	}
}


