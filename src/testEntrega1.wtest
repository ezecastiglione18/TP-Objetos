import empresa.*
import usuarios.*
import destinos.*

// el resultado da pero es una lista de listas 
test "los destinos mas importantes de barrileteCosmico el mas importante es garlicSea"
{
	assert.equals([garlicSea, lastToninas], barrileteCosmico.destinosMasImportantes())
}


test "aplicarle 25 de descuento a lastToninas con resultado 1125"
{
	lastToninas.aplicarDescuento(25)
	assert.equals(2625,lastToninas.precio())
}

test "aplicarle 25 de descuento a lastToninas y tiene el certificado de decuento en los imprescindibles"
{
	lastToninas.aplicarDescuento(25)
	assert.that(lastToninas.equipajeImprescindible().contains("certificado de descuento"))
}

test "silver sea no es un destino peligroso"
{
	assert.notThat(silverSea.esPeligroso())
}

test "aplicar descuento a todos y chequear garlicSea"
{
	barrileteCosmico.aplicarDescuento(15)
	assert.equals(2125,garlicSea.precio())	
	
}

test "aplicar descuento a todos y chequear silverSea"
{
	barrileteCosmico.aplicarDescuento(15)
	assert.equals(1147.5,silverSea.precio())	
	
}

test "aplicar descuento a todos y chequear lastToninas"
{
	barrileteCosmico.aplicarDescuento(15)
	assert.equals(2975,lastToninas.precio())	

}

test "aplicar descuento a todos y chequear goodAirs"
{
	barrileteCosmico.aplicarDescuento(15)
	assert.equals(1275,goodAirs.precio())	
}

test "al aplicarDescuento a todos, todos tienen el certificado de descuento"
{
	barrileteCosmico.aplicarDescuento(15)
	assert.that(barrileteCosmico.destinos().all({destino => destino.tieneDescuento()}))
}

// el resultado da pero es una lista de listas 
test "los destinos mas peligrosos hasta el momento"
{
	assert.equals([lastToninas],barrileteCosmico.destinosPeligrosos())
}

test "es barrilete cosmico una empresa extrema"
{	
	assert.that(barrileteCosmico.esExtrema())
}
test "obtener la carta de destinos (lastToninas, garlicSea, silverSea, goodAirs) de barrilete cosmico (solo nombre)"
{
	assert.equals(["garlics Sea", "silvers Sea", "last Toninas", "good Airs"], barrileteCosmico.cartaDeDestinos())
}

test "obtener los km de phari"
{
	assert.equals(500, pabloHari.kilometros())
}

test "hacer que phari vuele hasta silver's sea"
{
	pabloHari.volarHacia(silverSea)
	assert.that(pabloHari.historial().contains(silverSea))
}

test "hacer que phari tenga $150 en su cuenta despues de volar a silver's Sea"
{
	pabloHari.volarHacia(silverSea)
	assert.equals(150, pabloHari.cuenta())
}